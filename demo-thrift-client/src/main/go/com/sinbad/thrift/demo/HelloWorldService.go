// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package demo

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type HelloWorldService interface {
  // Parameters:
  //  - Name
  SayHello(ctx context.Context, name string) (r string, err error)
  // Parameters:
  //  - Name
  SayGoodBye(ctx context.Context, name string) (r string, err error)
}

type HelloWorldServiceClient struct {
  c thrift.TClient
}

func NewHelloWorldServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HelloWorldServiceClient {
  return &HelloWorldServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewHelloWorldServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HelloWorldServiceClient {
  return &HelloWorldServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewHelloWorldServiceClient(c thrift.TClient) *HelloWorldServiceClient {
  return &HelloWorldServiceClient{
    c: c,
  }
}

func (p *HelloWorldServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Name
func (p *HelloWorldServiceClient) SayHello(ctx context.Context, name string) (r string, err error) {
  var _args0 HelloWorldServiceSayHelloArgs
  _args0.Name = name
  var _result1 HelloWorldServiceSayHelloResult
  if err = p.Client_().Call(ctx, "sayHello", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Name
func (p *HelloWorldServiceClient) SayGoodBye(ctx context.Context, name string) (r string, err error) {
  var _args2 HelloWorldServiceSayGoodByeArgs
  _args2.Name = name
  var _result3 HelloWorldServiceSayGoodByeResult
  if err = p.Client_().Call(ctx, "sayGoodBye", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type HelloWorldServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler HelloWorldService
}

func (p *HelloWorldServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *HelloWorldServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *HelloWorldServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewHelloWorldServiceProcessor(handler HelloWorldService) *HelloWorldServiceProcessor {

  self4 := &HelloWorldServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["sayHello"] = &helloWorldServiceProcessorSayHello{handler:handler}
  self4.processorMap["sayGoodBye"] = &helloWorldServiceProcessorSayGoodBye{handler:handler}
return self4
}

func (p *HelloWorldServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x5

}

type helloWorldServiceProcessorSayHello struct {
  handler HelloWorldService
}

func (p *helloWorldServiceProcessorSayHello) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HelloWorldServiceSayHelloArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sayHello", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HelloWorldServiceSayHelloResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.SayHello(ctx, args.Name); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sayHello: " + err2.Error())
    oprot.WriteMessageBegin("sayHello", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("sayHello", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type helloWorldServiceProcessorSayGoodBye struct {
  handler HelloWorldService
}

func (p *helloWorldServiceProcessorSayGoodBye) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := HelloWorldServiceSayGoodByeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sayGoodBye", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := HelloWorldServiceSayGoodByeResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.SayGoodBye(ctx, args.Name); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sayGoodBye: " + err2.Error())
    oprot.WriteMessageBegin("sayGoodBye", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("sayGoodBye", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Name
type HelloWorldServiceSayHelloArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewHelloWorldServiceSayHelloArgs() *HelloWorldServiceSayHelloArgs {
  return &HelloWorldServiceSayHelloArgs{}
}


func (p *HelloWorldServiceSayHelloArgs) GetName() string {
  return p.Name
}
func (p *HelloWorldServiceSayHelloArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HelloWorldServiceSayHelloArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *HelloWorldServiceSayHelloArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sayHello_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HelloWorldServiceSayHelloArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *HelloWorldServiceSayHelloArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HelloWorldServiceSayHelloArgs(%+v)", *p)
}

// Attributes:
//  - Success
type HelloWorldServiceSayHelloResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewHelloWorldServiceSayHelloResult() *HelloWorldServiceSayHelloResult {
  return &HelloWorldServiceSayHelloResult{}
}

var HelloWorldServiceSayHelloResult_Success_DEFAULT string
func (p *HelloWorldServiceSayHelloResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return HelloWorldServiceSayHelloResult_Success_DEFAULT
  }
return *p.Success
}
func (p *HelloWorldServiceSayHelloResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *HelloWorldServiceSayHelloResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HelloWorldServiceSayHelloResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *HelloWorldServiceSayHelloResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sayHello_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HelloWorldServiceSayHelloResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *HelloWorldServiceSayHelloResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HelloWorldServiceSayHelloResult(%+v)", *p)
}

// Attributes:
//  - Name
type HelloWorldServiceSayGoodByeArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewHelloWorldServiceSayGoodByeArgs() *HelloWorldServiceSayGoodByeArgs {
  return &HelloWorldServiceSayGoodByeArgs{}
}


func (p *HelloWorldServiceSayGoodByeArgs) GetName() string {
  return p.Name
}
func (p *HelloWorldServiceSayGoodByeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HelloWorldServiceSayGoodByeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *HelloWorldServiceSayGoodByeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sayGoodBye_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HelloWorldServiceSayGoodByeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *HelloWorldServiceSayGoodByeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HelloWorldServiceSayGoodByeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type HelloWorldServiceSayGoodByeResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewHelloWorldServiceSayGoodByeResult() *HelloWorldServiceSayGoodByeResult {
  return &HelloWorldServiceSayGoodByeResult{}
}

var HelloWorldServiceSayGoodByeResult_Success_DEFAULT string
func (p *HelloWorldServiceSayGoodByeResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return HelloWorldServiceSayGoodByeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *HelloWorldServiceSayGoodByeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *HelloWorldServiceSayGoodByeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HelloWorldServiceSayGoodByeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *HelloWorldServiceSayGoodByeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sayGoodBye_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HelloWorldServiceSayGoodByeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *HelloWorldServiceSayGoodByeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HelloWorldServiceSayGoodByeResult(%+v)", *p)
}


